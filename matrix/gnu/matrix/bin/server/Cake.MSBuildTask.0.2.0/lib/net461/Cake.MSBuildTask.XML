<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.MSBuildTask</name>
    </assembly>
    <members>
        <member name="T:Cake.MSBuildTask.CakeMSBuildEngine">
            <summary>
            Cake MS Build Engine
            </summary>
        </member>
        <member name="F:Cake.MSBuildTask.CakeMSBuildEngine.context">
            <summary>The cake context</summary>
        </member>
        <member name="M:Cake.MSBuildTask.CakeMSBuildEngine.#ctor(Cake.Core.ICakeContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.MSBuildTask.CakeMSBuildEngine"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Cake.MSBuildTask.CakeMSBuildEngine.ColumnNumberOfTaskNode">
            <summary>
            Gets the line number of the task node within the project file that called it.
            </summary>
        </member>
        <member name="P:Cake.MSBuildTask.CakeMSBuildEngine.ContinueOnError">
            <summary>
            Gets a value indicating whether the ContinueOnError flag was set to true for this particular task in the project file.
            </summary>
        </member>
        <member name="P:Cake.MSBuildTask.CakeMSBuildEngine.ErrorText">
            <summary>
            Gets the error text.
            </summary>
        </member>
        <member name="P:Cake.MSBuildTask.CakeMSBuildEngine.LineNumberOfTaskNode">
            <summary>
            Gets the line number of the task node within the project file that called it.
            </summary>
        </member>
        <member name="P:Cake.MSBuildTask.CakeMSBuildEngine.ProjectFileOfTaskNode">
            <summary>
            Gets the full path to the project file that contained the call to this task.
            </summary>
        </member>
        <member name="M:Cake.MSBuildTask.CakeMSBuildEngine.BuildProjectFile(System.String,System.String[],System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Initiates a build of a project file. If the build is successful, the outputs, if any, of the specified targets are returned.
            </summary>
            <param name="projectFileName">The name of the project file to build.</param>
            <param name="targetNames">The names of the target in the project to build. Separate multiple targets with a semicolon (;).</param>
            <param name="globalProperties">An <see cref="T:System.Collections.IDictionary" /> of additional global properties to apply to the project. The key and value must be String data types.</param>
            <param name="targetOutputs">The outputs of each specified target.</param>
            <returns>
            true if the build was successful; otherwise, false.
            </returns>
            <exception cref="T:System.NotImplementedException">This method is not implemented.</exception>
        </member>
        <member name="M:Cake.MSBuildTask.CakeMSBuildEngine.LogCustomEvent(Microsoft.Build.Framework.CustomBuildEventArgs)">
            <summary>
            Raises a custom event to all registered loggers.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Cake.MSBuildTask.CakeMSBuildEngine.LogErrorEvent(Microsoft.Build.Framework.BuildErrorEventArgs)">
            <summary>
            Raises an error event to all registered loggers.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Cake.MSBuildTask.CakeMSBuildEngine.LogMessageEvent(Microsoft.Build.Framework.BuildMessageEventArgs)">
            <summary>
            Raises a message event to all registered loggers.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Cake.MSBuildTask.CakeMSBuildEngine.LogWarningEvent(Microsoft.Build.Framework.BuildWarningEventArgs)">
            <summary>
            Raises a warning event to all registered loggers.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="T:Cake.MSBuildTask.MSBuildTaskAliases">
            <summary>
            Contains MSBuildTask Extensions
            </summary>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.MSBuildTaskExecute(Cake.Core.ICakeContext,Microsoft.Build.Framework.ITask)">
            <summary>
            Executes an MSBuild task
            </summary>
            <param name="context">Cake context</param>
            <param name="task">The task.</param>
            <example>
            This sample shows how to call the <see cref="M:Cake.MSBuildTask.MSBuildTaskAliases.MSBuildTaskExecute(Cake.Core.ICakeContext,Microsoft.Build.Framework.ITask)"/> extension.
            <code>
            // 1. Add reference to addin the top of your cake script:
            #addin Cake.MSBuildTask
            
            // 2. Reference the dll(s) that has the MSBuild task(s) you want to use in your build
            // Note that for MSBuild.Extension.Pack the present version of Cake (0.5.4) can't use
            // '#addin MSBuild.Extension.Pack' as the Nuget package has two versions of dlls in it
            // instead you need to add MSBuild.Extension.Pack to tools/packages.config and reference dll like so:
            #r .\tools\Addins\MSBuild.Extension.Pack\tools\net40\MSBuild.ExtensionPack.dll
            
            // 3. Use the MSBuild task in the script.
            // Here we are using SVN task from  MSBuild.Extension.Pack:
            Task("TestMSBuildTask")
                .Does(() =>
                {
                    // a. Create the task
                    var svn = new MSBuild.ExtensionPack.Subversion.Svn();
                    var checkoutFolder = GetDirectories("./SrcFolder").FirstOrDefault();
            
                     // b. Configure the task
                    // If the folder doesn't exist then do a Checkout, otherwise Update.
                    if (checkoutFolder == null)
                    {
                        checkoutFolder = MakeAbsolute((DirectoryPath)"./SrcFolder");
                        svn.TaskAction = "Checkout";
                        // The .ToTaskItem() and .ToTaskItems() are helper methods provided by MSBuildTaskAliases
                        svn.Items = checkoutUrl.ToTaskItems();
                        svn.Destination = checkoutFolder.ToTaskItem();
                    }
                    else
                    {
                        svn.TaskAction = "Update";
                        svn.Items = checkoutFolder.ToTaskItems();
                    }
             
                    // c. Execute the task
                    MSBuildTaskExecute(svn);
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.ToTaskItem(System.String)">
            <summary>
            Converts the path to an MSBuild task item.
            </summary>
            <param name="path">The path.</param>
            <returns>Task Item</returns>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.ToTaskItem(Cake.Core.IO.FilePath)">
            <summary>
            Converts the path to an MSBuild task item.
            </summary>
            <param name="path">The path.</param>
            <returns>Task Item</returns>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.ToTaskItem(Cake.Core.IO.DirectoryPath)">
            <summary>
            Converts the path to an MSBuild task item.
            </summary>
            <param name="path">The path.</param>
            <returns>Task Item</returns>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.ToTaskItems(System.String)">
            <summary>
            Converts the path to an array of task items with a single item.
            </summary>
            <param name="path">The path.</param>
            <returns>Task Item</returns>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.ToTaskItems(Cake.Core.IO.FilePath)">
            <summary>
            Converts the path to an array of task items with a single item.
            </summary>
            <param name="path">The path.</param>
            <returns>Task Item</returns>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.ToTaskItems(Cake.Core.IO.DirectoryPath)">
            <summary>
            Converts the path to an array of task items with a single item.
            </summary>
            <param name="path">The path.</param>
            <returns>Task Item</returns>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.ToTaskItems(System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath})">
            <summary>
            Converts the paths to MSBuild task items.
            </summary>
            <param name="paths">The paths.</param>
            <returns>Task Item</returns>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.ToTaskItems(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts the paths to MSBuild task items.
            </summary>
            <param name="paths">The paths.</param>
            <returns>Task Item</returns>
        </member>
        <member name="M:Cake.MSBuildTask.MSBuildTaskAliases.ToTaskItems(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Converts the paths to MSBuild task items.
            </summary>
            <param name="paths">The paths.</param>
            <returns>Task Item</returns>
        </member>
    </members>
</doc>
